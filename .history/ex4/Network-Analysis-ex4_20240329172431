import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
N = 3000
p = 10**-2
L = p * N * (N - 1) / 2
print(f'The expected number of edges is {L:.2f}.')
k = p * (N - 1)
regime = 'supercritical' if k > 1 else 'subcritical' if k < 1 else 'critical'
print(f'The regime is {regime}.')
pc = 1 / (N - 1)
print(f'The critical probability is {pc:.2f}.')
Ncr = 1 / p
print(f'The critical number of nodes is {Ncr:.2f}.')
kcr = p * (Ncr - 1)
d = np.log(Ncr) / np.log(kcr)
print(f'The critical average degree is {kcr:.2f}.')
print(f'The critical average distance is {d:.2f}.')


print("//////////////////////////////////////////")
G=nx.erdos_renyi_graph(N,p)
   
import networkx as nx
import numpy as np

# Calculate the actual number of links
L_actual = G.number_of_edges()
print(f'The actual number of links is {L_actual}.')

# Calculate the actual number of connected components
num_components = nx.number_connected_components(G)
print(f'The actual number of connected components is {num_components}.')

# Calculate the actual average degree
degrees = [deg for node, deg in G.degree()]
k_actual = sum(degrees) / N
print(f'The actual average degree is {k_actual:.2f}.')

# Calculate the actual average distance between two randomly chosen nodes
# Note: This can be computationally expensive for large graphs
if nx.is_connected(G):
    d_actual = nx.average_shortest_path_length(G)
    print(f'The actual average distance between two randomly chosen nodes is {d_actual:.2f}.')
else:
    print('The graph is not connected, cannot calculate the average distance.')


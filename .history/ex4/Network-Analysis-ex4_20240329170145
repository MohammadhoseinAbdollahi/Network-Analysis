import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

# Number of nodes
n = 3000

# Initialize the probability
p = 10 ** -3

# Number of graphs
num_graphs = 5

# Create a figure and a grid of subplots
fig, axs = plt.subplots(3, 4, figsize=(15, 15))
for i in range(500,3000,500):
    G = nx.erdos_renyi_graph(i, p)

    # Find the two most distanced nodes in the G graph
    if nx.is_connected(G):
        diameter = nx.diameter(G)
    else:
        # Get the largest connected component
        largest_cc = max(nx.connected_components(G), key=len)
        subgraph = G.subgraph(largest_cc)
        diameter = nx.diameter(subgraph)

    # Get the nodes in the periphery of the graph (or subgraph)
    periphery_nodes = nx.periphery(G if nx.is_connected(G) else subgraph)

    # Find the shortest path between the two most distanced nodes
    longest_path = []
    for node1 in periphery_nodes:
        for node2 in periphery_nodes:
            if node1 != node2:
                path = nx.shortest_path(G, node1, node2)
                if len(path) > len(longest_path):
                    longest_path = path

    # Calculate the subplot indices
    row = (i // 500) - 1
    col = (i // 500) % 4 - 1

    # Plot the diameter parameter with the number of nodes in the corresponding subplot
    axs[row, col].plot(i, diameter, 'ro')

    # Plot the longest path parameter with the number of nodes in the corresponding subplot
    axs[row, col].plot(i, len(longest_path) - 1, 'bo')

    # Set the x-axis label for the subplot
    axs[row, col].set_xlabel('Number of Nodes')

    # Set the y-axis label for the subplot
    axs[row, col].set_ylabel('Parameter Value')

    # Set the title of the subplot
    axs[row, col].set_title(f'Parameter Values vs Number of Nodes (n={i})')

# Adjust the spacing between subplots
plt.tight_layout()

# Show the plot
plt.show()


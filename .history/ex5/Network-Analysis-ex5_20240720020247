import networkx as nx
import random
import matplotlib.pyplot as plt
from networkx import triangular_lattice_graph

m=50

n=50

G=triangular_lattice_graph(m, n, periodic=False, with_positions=True, create_using=None)

print(f"Number of nodes: {G.number_of_nodes()}")
print(f"Number of edges: {G.number_of_edges()}")
print(f"Min degree: {min(dict(G.degree()).values())}")
print(f"Max degree: {max(dict(G.degree()).values())}")
print(f"Transitivity: {nx.transitivity(G)}")
print(f"Average clustering: {nx.average_clustering(G)}")
diameter = nx.diameter(G)
num_triangles = nx.triangles(G)
#clustering_coefficient = nx.clustering(G)

print(f"Diameter: {diameter}")
print(f"Number of triangles: {len(num_triangles)}")
print(f"Transitivity: {nx.transitivity(G)}")
#print(f"Clustering coefficient: {clustering_coefficient}")
    
# Draw the graph
degree_sequence = [d for n, d in G.degree()]
degree_count = nx.degree_histogram(G)
degree_probability = [count / sum(degree_count) for count in degree_count]
plt.bar(range(len(degree_count)), degree_probability)
plt.xlabel('Degree')
plt.ylabel('p(k)')
plt.title('Degree Distribution')
plt.show()


# nx.draw(G, with_labels=True)
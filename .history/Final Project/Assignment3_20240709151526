
# For Part 3, after identifying the most damaging attack strategy, propose and implement a strategy to improve network robustness.

# Identify the most damaging attack strategy
most_damaging_strategy = max([
    ('Random Failures', sizes_random_failures[-1]),
    ('Targeted Attacks (Degree)', sizes_targeted_attacks_degree[-1]),
    ('Targeted Attacks (Betweenness)', sizes_targeted_attacks_betweenness[-1]),
    ('Targeted Attacks (Pagerank)', sizes_targeted_attacks_pagerank[-1])
], key=lambda x: x[1])

print(f"The most damaging attack strategy is: {most_damaging_strategy[0]}")

# Plot the simulation of the most damaging attack strategy frame by frame
if most_damaging_strategy[0] == 'Random Failures':
    sizes = sizes_random_failures
elif most_damaging_strategy[0] == 'Targeted Attacks (Degree)':
    sizes = sizes_targeted_attacks_degree
elif most_damaging_strategy[0] == 'Targeted Attacks (Betweenness)':
    sizes = sizes_targeted_attacks_betweenness
elif most_damaging_strategy[0] == 'Targeted Attacks (Pagerank)':
    sizes = sizes_targeted_attacks_pagerank

# Function to compute the critical threshold mathematically
def compute_critical_threshold(graph):
    # Compute the adjacency matrix of the graph
    A = nx.adjacency_matrix(graph)
    A = A.astype('d')
    # Compute the largest eigenvalue of the adjacency matrix
    largest_eigenvalue = scipy.sparse.linalg.eigs(A, k=1, which='LM', return_eigenvectors=False)
    # The critical threshold is the inverse of the largest eigenvalue
    critical_threshold = 1 / np.abs(largest_eigenvalue[0])
    return critical_threshold.real


# Compute the critical threshold before the improvement
critical_threshold_before = compute_critical_threshold(graph)


# Then, compute the critical threshold before and after the improvement to evaluate the effectiveness of your strategy.
critical_threshold_after = compute_critical_threshold(graph)

print(f"Critical Threshold Before Improvement: {critical_threshold_before}")
print(f"Critical Threshold After Improvement: {critical_threshold_after}")

# Recompute the sizes after improvement for the most damaging strategy
attack_after_improvement = simulate_attacks(graph, random_nodes)  # Ensure this uses the correct nodes based on the strategy

# Now, plot the results including the improved strategy
plt.plot(sizes_random_failures, label='Random Failures')
plt.plot(sizes_targeted_attacks_degree, label='Targeted Attacks (Degree)')
plt.plot(sizes_targeted_attacks_betweenness, label='Targeted Attacks (Betweenness)')
plt.plot(sizes_targeted_attacks_pagerank, label='Targeted Attacks (Pagerank)')
plt.plot(attack_after_improvement, label='After Improvement', linestyle='--')  # This should now reflect changes

plt.xlabel('Number of Nodes Removed')
plt.ylabel('Size of Giant Component (Normalized)')
plt.title('Network Robustness: Random vs. Targeted Attacks and Improvement')
plt.legend()
plt.tight_layout()
plt.show()

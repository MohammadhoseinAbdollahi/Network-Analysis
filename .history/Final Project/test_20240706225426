import imageio.v2 as imageio
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

def compute_giant_component_size(G):
    if G.number_of_nodes() == 0:
        return 0
    if nx.is_directed(G):
        largest_scc = max(nx.strongly_connected_components(G), key=len)
    else:
        largest_scc = max(nx.connected_components(G), key=len)
    return len(largest_scc)

def simulate_attacks(graph, nodes_to_remove):
    sizes = []
    G = graph.copy()
    initial_size = compute_giant_component_size(G)
    sizes.append(initial_size / G.number_of_nodes())  # Normalized size of the giant component
    for node in nodes_to_remove:
        G.remove_node(node)
        giant_component_size = compute_giant_component_size(G)
        sizes.append(giant_component_size / initial_size)
    return G,sizes

def simulate_random_attacks(G, fraction=0.2):
    G_copy = G.copy()
    nodes_to_remove = np.random.permutation(G_copy.nodes)
    num_nodes = int(len(nodes_to_remove) * fraction)
    nodes_to_remove = nodes_to_remove[:num_nodes]
    return simulate_attacks(G_copy, nodes_to_remove)

def simulate_high_degree_attacks(G, fraction=0.2):
    G_copy = G.copy()
    degree_sorted_nodes = sorted(G_copy.degree, key=lambda x: x[1], reverse=True)
    nodes_to_remove = [node for node, _ in degree_sorted_nodes]
    num_nodes = int(len(nodes_to_remove) * fraction)
    nodes_to_remove = nodes_to_remove[:num_nodes]
    return simulate_attacks(G_copy, nodes_to_remove)

def simulate_high_betweenness_attacks(G, fraction=0.2):
    G_copy = G.copy()
    betweenness_sorted_nodes = sorted(nx.betweenness_centrality(G_copy).items(), key=lambda x: x[1], reverse=True)
    nodes_to_remove = [node for node, _ in betweenness_sorted_nodes]
    num_nodes = int(len(nodes_to_remove) * fraction)
    nodes_to_remove = nodes_to_remove[:num_nodes]
    return simulate_attacks(G_copy, nodes_to_remove)

def simulate_pagerank_attacks(G, fraction=0.2):
    G_copy = G.copy()
    pagerank_sorted_nodes = sorted(nx.pagerank(G_copy).items(), key=lambda x: x[1], reverse=True)
    nodes_to_remove = [node for node, _ in pagerank_sorted_nodes]
    num_nodes = int(len(nodes_to_remove) * fraction)
    nodes_to_remove = nodes_to_remove[:num_nodes]
    return simulate_attacks(G_copy, nodes_to_remove)

# Generate a random graph
graph = nx.erdos_renyi_graph(200, 0.05)
print("Number of nodes:", graph.number_of_nodes())
print("Number of edges:", graph.number_of_edges())
G_original = graph.copy()
# Perform attacks
attacks=("Random Failures", "Targeted Attacks (Degree)", "Targeted Attacks (Betweenness)", "Targeted Attacks (Pagerank)")
# Assuming the simulate_attacks_* functions are correctly modified to return sizes in a flat list format
result_random_failures = []
result_HighDegree = []
result_HighBetweenness = []
result_PageRank = []

for attack_type in attacks:
    G = G_original.copy()
    while G.number_of_edges() > 20 and G.number_of_nodes() > 20:
        if attack_type == "Random Failures":
            graph, sizes = simulate_random_attacks(G)
            result_random_failures.extend(sizes)
            print("1")
        elif attack_type == "Targeted Attacks (Degree)":
            graph, sizes = simulate_high_degree_attacks(G)
            result_HighDegree.extend(sizes)
            print("2")
        elif attack_type == "Targeted Attacks (Betweenness)":
            graph, sizes = simulate_high_betweenness_attacks(G)
            result_HighBetweenness.extend(sizes)
            print("3")
        elif attack_type == "Targeted Attacks (Pagerank)":
            graph, sizes = simulate_pagerank_attacks(G)
            result_PageRank.extend(sizes)
            print("4")
        # Ensure the graph is known as `graph` for further operations
        if nx.is_directed(G):
            # Use strongly connected components for directed graphs
            G = graph.subgraph(max(nx.strongly_connected_components(graph), key=len))
        else:
            # Use connected components for undirected graphs
            G = graph.subgraph(max(nx.connected_components(graph), key=len))
print (re)

# Plot results
plt.figure(figsize=(10, 6))
plt.plot(np.linspace(0, 1, len(result_random_failures)), result_random_failures, label="Random Failures")
plt.plot(np.linspace(0, 1, len(result_HighDegree)), result_HighDegree, label="High Degree")
plt.plot(np.linspace(0, 1, len(result_HighBetweenness)), result_HighBetweenness, label="High Betweenness")
plt.plot(np.linspace(0, 1, len(result_PageRank)), result_PageRank, label="PageRank")
plt.xlabel('Fraction of Attacks')
plt.ylabel('Normalized Size of the Largest Component')
plt.legend()
plt.title('Network Resilience Under Different Attack Strategies')
plt.show()

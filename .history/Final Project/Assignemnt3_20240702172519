import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

file_path = 'Final Project/email-dnc.edges'

def read_edge_list_with_bom(file_path):
    with open(file_path, 'r', encoding='utf-8-sig') as f:
        edges = f.readlines()
    return edges

edges = read_edge_list_with_bom(file_path)
graph = nx.parse_edgelist(edges, delimiter=",", create_using=nx.MultiDiGraph(), nodetype=int, data=(('timestamp', float),))

def compute_giant_component_size(G):
    if G.number_of_nodes() == 0:
        return 0
    # Use strongly connected components for directed graphs
    largest_scc = max(nx.strongly_connected_components(G), key=len)
    return len(largest_scc)

def simulate_attacks(graph, nodes_to_remove):
    sizes = []
    G = graph.copy()
    initial_size = compute_giant_component_size(G)
    sizes.append(initial_size / initial_size)  # Normalized size of the giant component
    for node in nodes_to_remove:
        G.remove_node(node)
        giant_component_size = compute_giant_component_size(G)
        sizes.append(giant_component_size / initial_size)
    return sizes



plt.figure(figsize=(14, 7))


# Random failures
random_nodes = np.random.permutation(graph.nodes)
sizes_random_failures = simulate_attacks(graph, random_nodes)
    
# Targeted attacks: Highest degree nodes
degree_sorted_nodes = sorted(graph.degree, key=lambda x: x[1], reverse=True)
degree_sorted_nodes = [node for node, _ in degree_sorted_nodes]
sizes_targeted_attacks_degree = simulate_attacks(graph, degree_sorted_nodes)
    
# Targeted attacks: Highest betweenness nodes
betweenness_sorted_nodes = sorted(nx.betweenness_centrality(graph).items(), key=lambda x: x[1], reverse=True)
betweenness_sorted_nodes = [node for node, _ in betweenness_sorted_nodes]
sizes_targeted_attacks_betweenness = simulate_attacks(graph, betweenness_sorted_nodes)
    
# Targeted attacks: Highest pagerank nodes
pagerank_sorted_nodes = sorted(nx.pagerank(graph).items(), key=lambda x: x[1], reverse=True)
pagerank_sorted_nodes = [node for node, _ in pagerank_sorted_nodes]
sizes_targeted_attacks_pagerank = simulate_attacks(graph, pagerank_sorted_nodes)
    
# Plot results
plt.subplot(1, 2, i+1)
plt.plot(sizes_random_failures, label='Random Failures')
plt.plot(sizes_targeted_attacks_degree, label='Targeted Attacks (Degree)')
plt.plot(sizes_targeted_attacks_betweenness, label='Targeted Attacks (Betweenness)')
plt.plot(sizes_targeted_attacks_pagerank, label='Targeted Attacks (Pagerank)')
plt.xlabel('Number of Nodes Removed')
plt.ylabel('Size of Giant Component (Normalized)')
plt.title(f'Network Robustness: Random vs. Targeted Attacks')
plt.legend()
plt.tight_layout()
plt.show()

# For Part 3, after identifying the most damaging attack strategy, propose and implement a strategy to improve network robustness.

# Identify the most damaging attack strategy
most_damaging_strategy = max([
    ('Random Failures', sizes_random_failures[-1]),
    ('Targeted Attacks (Degree)', sizes_targeted_attacks_degree[-1]),
    ('Targeted Attacks (Betweenness)', sizes_targeted_attacks_betweenness[-1]),
    ('Targeted Attacks (Pagerank)', sizes_targeted_attacks_pagerank[-1])
], key=lambda x: x[1])

print(f"The most damaging attack strategy is: {most_damaging_strategy[0]}")
# Compute critical threshold before improvement for most damaging strategy
if most_damaging_strategy[0] == 'Random Failures':
    critical_threshold_before = sizes_random_failures.index(min(sizes_random_failures))
    x=0
elif most_damaging_strategy[0] == 'Targeted Attacks (Degree)':
    critical_threshold_before = sizes_targeted_attacks_degree.index(min(sizes_targeted_attacks_degree))
elif most_damaging_strategy[0] == 'Targeted Attacks (Betweenness)':
    critical_threshold_before = sizes_targeted_attacks_betweenness.index(min(sizes_targeted_attacks_betweenness))
elif most_damaging_strategy[0] == 'Targeted Attacks (Pagerank)':
    critical_threshold_before = sizes_targeted_attacks_pagerank.index(min(sizes_targeted_attacks_pagerank))


# Implement a strategy to improve network robustness
if most_damaging_strategy[0] == 'Random Failures':
    # Implement strategy to improve robustness against random failures
    for node in graph.nodes():
        neighbors = list(graph.neighbors(node))
        if len(neighbors) < 3:  # Example condition to add more edges
            possible_neighbors = [n for n in graph.nodes() if n != node and n not in neighbors]
            if possible_neighbors:
                new_neighbor = np.random.choice(possible_neighbors)
                graph.add_edge(node, new_neighbor)
    pass

elif most_damaging_strategy[0] == 'Targeted Attacks (Degree)':
    # Implement strategy to improve robustness against degree-based attacks
    for node in graph.nodes():
        degree = graph.degree(node)
        if degree > 10:  # Example condition to redistribute connections
            neighbors = list(graph.neighbors(node))
            if neighbors:
                graph.remove_edge(node, neighbors[0])  # Example: Remove one edge from high-degree node
    pass

elif most_damaging_strategy[0] == 'Targeted Attacks (Betweenness)':
    # Implement strategy to improve robustness against betweenness-based attacks
    for edge in graph.edges():
        betweenness = nx.edge_betweenness_centrality(graph)
        if betweenness[edge] > 0.1:  # Example condition to reroute critical paths
            node1, node2 = edge
            neighbors1 = list(graph.neighbors(node1))
            neighbors2 = list(graph.neighbors(node2))
            if neighbors1 and neighbors2:
                graph.remove_edge(node1, neighbors1[0])  # Example: Reroute one critical path
                graph.remove_edge(node2, neighbors2[0])
                graph.add_edge(neighbors1[0], neighbors2[0])
    pass
elif most_damaging_strategy[0] == 'Targeted Attacks (Pagerank)':
    # Implement strategy to improve robustness against PageRank-based attacks
    for node in graph.nodes():
        pagerank = nx.pagerank(graph)
        if pagerank[node] > 0.05:  # Example condition to reduce influence
            neighbors = list(graph.neighbors(node))
            if neighbors:
                graph.remove_edge(node, neighbors[0])  # Example: Dampen influence of high-PageRank node
    pass

# Then, compute the critical threshold before and after the improvement to evaluate the effectiveness of your strategy.



# Apply chosen strategy (e.g., against degree-based attacks as an example)
# Example: Implement the strategy code block corresponding to the identified most damaging strategy.

# Compute critical threshold after improvement
critical_threshold_after = sizes_targeted_attacks_degree.index(min(sizes_targeted_attacks_degree)) + 1

print(f"Critical Threshold Before Improvement: {critical_threshold_before}")
print(f"Critical Threshold After Improvement: {critical_threshold_after}")

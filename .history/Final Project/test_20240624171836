# import json

# # Step 1: Define Data Structures
# category_followers = {}

# # Step 2: Parse JSON File
# with open('Final Project/SOC-GEMSEC-HR.JSON', 'r') as json_file:
#     node_categories = json.load(json_file)

# # Step 3: Process Data
# for node, categories in node_categories.items():
#     for category in categories:
#         if category not in category_followers:
#             category_followers[category] = []
#         category_followers[category].append(node)

# # Step 4: Parse Edges File and Update Data
# with open('Final Project/SOC-GEMSEC-HR.EDGES', 'r') as edges_file:
#     for line in edges_file:
#         source, target = line.strip().split(',')
#         if source in node_categories:
#             for category in node_categories[source]:
#                 if target not in category_followers[category]:
#                     category_followers[category].append(target)

# # Step 5: Create Graph
# # Assuming a simple graph structure where each node is connected to its categories
# graph = {}
# for category, followers in category_followers.items():
#     graph[category] = followers

# # Step 6: Output (For demonstration, printing the graph structure)
# print(json.dumps(graph, indent=4))
# # Step 7: Save Graph as JSON
# graph_json = json.dumps(graph)
# with open('graph.json', 'w') as json_file:
#     json_file.write(graph_json)

import json
import networkx as nx

# Step 1: Load the JSON file
with open('Final Project/graph.json', 'r') as file:
    data = json.load(file)

# Step 2: Create a graph
G = nx.Graph()
for node, neighbors in data.items():
    for neighbor in neighbors:
        G.add_edge(node, neighbor)
        print(node, neighbor)

# Step 3: Find the giant component
giant_component_nodes = max(nx.connected_components(G), key=len)
print(giant_component_nodes)
giant_component = G.subgraph(giant_component_nodes)
print(giant_component)

# Step 4: Extract the subgraph (already done in step 3)

import matplotlib.pyplot as plt

import random

# Sample a subset of nodes if the giant component is too large
sample_size = 5000  # Adjust based on your needs and capabilities
if len(giant_component_nodes) > sample_size:
    sampled_nodes = random.sample(list(giant_component_nodes), sample_size)
    giant_component_sampled = G.subgraph(sampled_nodes)
else:
    giant_component_sampled = giant_component

# Use a layout that can handle large graphs more efficiently
pos = nx.spring_layout(giant_component_sampled, iterations=50)

# Draw the sampled/whole giant component with an efficient layout
plt.figure(figsize=(12, 12))  # Adjust figure size as needed
nx.draw(giant_component_sampled, pos, with_labels=False, node_size=20, edge_color="gray", linewidths=0.5)
plt.title("Sampled Giant Component of the Graph")
plt.show()